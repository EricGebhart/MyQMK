* Layers

** Introduction
 Non-Base Layer Definitions.
 Symbols, keypads, navigation, etc.

** Files
Everything has been split into pieces for a long time. I do like it organized
that way, even with all of it inside here. Its better for folks who dont
use emacs or org. Poor them.
*** layers.h

#+begin_src C :tangle layers.h
#pragma once
/*
  Copyright 2018 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "keycodes.h"
#+end_src


#+begin_src C :tangle layers.h
#define CHUNK_LANG_MAP(...) LANG_MAP(__VA_ARGS__)
#define CHUNK_LANG_ROW(...) LANG_ROW(__VA_ARGS__)

// moved smart/one-shot mod row to perimeter/toprows.

#include "toprows.h"
#include "keypads.h"
#include "nav.h"
#include "symbols.h"
#include "utility.h"
#+end_src

*** toprows.h

#+begin_src C :tangle toprows.h

/*
  Copyright 2018-2022 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include "keycodes.h"
/*******************************************************************/
/* A Top Rows layer.  Pick your parts.  Bepo and Qwerty            */
/*                                                                 */
/* This is, to me, a stop gap layer. If I need symbols, numbers or */
/* function keys these rows are nicely predictable to most people. */
/* I currently use the beakl number row with regular symbols.      */
/* I never use function keys for anything.                         */
/*******************************************************************/

/********************************************************************************/
/* TOPROWS Layer chunk                                                          */
/********************************************************************************/
#+end_src

*** keypads.h

#+begin_src C :tangle keypads.h
/*
  Copyright 2018-2022 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src

*** nav.h

#+begin_src C :tangle nav.h
/*
  Copyright 2018-2022 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
,*/
#+end_src

*** symbols.h

#+begin_src C :tangle symbols.h
/*
  Copyright 2018-2022 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
,*/
#+end_src

*** accents.h

#+begin_src C :tangle accents.h
/*
  Copyright 2018-2023 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src

*** utility.h

#+begin_src C :tangle utility.h
/*
  Copyright 2018-2022 Eric Gebhart <e.a.gebhart@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#+end_src


** Accents
Rather than battle with algr, language, and input methods, I just created some
layers that I can use for all my accented key needs. I put these on a key as
a one shot layer. It is very convenient.

I still have dead keys on my base alpha layer, but not on my symbol layers.

You can see I tried to display these on Oled. It doesnt work, and I dont know that
it ever will.  Using Quantum Painter with newer technology can do this. So that is
coming up.

*** Accented
#+begin_src C :tangle accents.h
// doesnt work, oled displays garbage
/* #define CARTE_ACCENTED                          \ */
/*   carte_de_map(" æœêùì  ¿ïüöë ",                \ */
/*                " àôèéî  ûçñß^",                 \ */
/*                " âöíúí       ") */

// need to figure out a better way to display these on the oled.
#define CARTE_ACCENTED                          \
  carte_de_map(" aoeui  ?iuoe ",                \
               " aoeei  ucnS^",                 \
               " aoiúi       ")

#define ___ACCENTED___                                                  \
  LANG_MAP(_AE,   _OE,   _ECIR, _UGRV, _IGRV,   _IQUE, _IIAE, _UIAE, _OIAE, _EIAE, \
           _AGRV, _OCIR, _EGRV, _EACU, _ICIR,   _UCIR, _CCED, _NTIL, _SS,   _DCIR, \
           _AACU, _ODIA, _IACU, _UACU, _IACU,   _SPC,  _SPC,  _SPC , _SPC,  _SPC)
#+end_src
*** Morte - Dead keys
#+begin_src C :tangle accents.h
// doesnt work, oled displays garbage

// A dead key layer, optimized for Most common,
// western european.
#define CARTE_MORTE                             \
  carte_de_map(" ˝˘̉   ̛ ˙° ",                    \
               "/`^´  ¸¨~¤",                    \
               " ,ˇ.  ˛µ¯")

#define ___MORTE___                                                     \
  LANG_MAP(_,     _DACU, _BREV, _HOKA, _,   _, _HORN, _DOTA, _RNGA, _,  \
           _DSLS, _DGRV, _DCIR, _ACUT, _,   _, _CEDL, _DIAE, _DTIL, _CURR, \
           _,     _DCMM, _CARN, _DOTB, _,   _, _OGON, _DGRK, _MACR, _)

#+end_src
*** Accents Morte

Both accented keys and dead keys on one layer. The most common of
each for western europe are on the home row.

#+begin_src C :tangle accents.h
// Just taking a guess and putting the things I know are most
// used in easy to use places., not sure about ntil and ss, put
// them in their dvorak spots on the home row.

/* #define CARTE_ACCENTS_MORTE                     \ */
/*   carte_de_map(" æœêùì  ¿`^´ë ",                \ */
/*                " àôèéî  ¸çñß~",                 \ */
/*                " âö,úí   ¨ˇ°   ") */

#define CARTE_ACCENTS_MORTE                     \
  carte_de_map(" aoeui  ?`^'e ",                \
               " aoeei  ,cnS~",                 \
               " ao,ui   \"^o")

#define ___ACCENTS_MORTE___                                             \
  LANG_MAP(_AE,   _OE,    _ECIR,  _UGRV,  _IGRV,    _IQUE, _DGRV, _DCIR, _ACUT, _EIAE, \
           _AGRV, _OCIR,  _EGRV,  _EACU,  _ICIR,    _CEDL, _CCED, _NTIL, _SS,   _DTIL, \
           _AACU, _OIAE,  _DCMM,  _UACU,  _IACU,    _OGON, _DIAE, _CARN, _RNGA, _HORN)
#+end_src

These are the dead keys in Bépo

#+begin_src C :tangle accents.h
/* // DEAD layer. */
/* BP_DCIR // ^ (dead) */
/* BP_ACUT // ´ (dead) */
/* BP_DGRV // ` (dead) */
/* BP_CARN // ˇ (dead) */
/* BP_DSLS // / (dead) */
/* BP_BREV // ˘ (dead) */
/* BP_DIAE // ¨ (dead) */
/* BP_DTIL // ~ (dead) */
/* BP_MACR // ¯ (dead) */
/* BP_CEDL // ¸ (dead) */
/* BP_RNGA // ° (dead) */
/* BP_DGRK // µ (dead Greek key) */
/* BP_OGON // ˛ (dead) */
/* BP_DACU // ˝ (dead) */
/* BP_DOTA // ˙ (dead) */
/* BP_CURR // ¤ (dead) */
/* BP_HORN // ̛  (dead) */
/* BP_DCMM // , (dead) */
/* BP_HOKA // ̉  (dead) */
/* BP_DOTB // ̣  (dead) */
#+end_src

** Keypads
*** Introduction

There are a number of keypads to choose from here. Plenty of regular keypads and funcpads
both left and right. There are hexpads and miryoku keypads and funcpads.

Everything is right here, The language wrappers and the carte de map take care of a lot
of work and convert everything into the proper keycodes and display a reasonable map
on the Oled. And make it easy to read here.

I have settled around the beakl 15 keypad, but still like to experiment.
There are Bépo and En versions which also work for Us-intl.

There are both 3 and  4 row versions of most things.

*** Parts are parts. Get yours here.

**** Beakl

I like this Beakl keypad there isnt much difference between them. Especially if
you limit it to 3 rows.

#+begin_src C :tangle keypads.h

// BEAKL 15 (numpad layer):
/*    +=*   ^%~ */
/*   ↹523:      */
/* - 7.104      */
/*   /698,      */

/* BEAKL27 (numpad layer): */
/*   ↹+/\*=  yxz */
/*    -523: ~FED */
/*    7.104 {CBA} */
/*    ,698⏎  []% */
#+end_src

***** Beakl 15 keypad

#+begin_src C :tangle keypads.h

// Keypads
#define ___KEYPAD_BEAKL_L1___  ___,    _PLUS,  _SLSH,  _ASTR, _EQL
#define ___KEYPAD_BEAKL_L2___  _MINS,  _5,     _2,     _3,   _COLN
#define ___KEYPAD_BEAKL_L3___  _7,     _DOT,   _1,     _0,   _4
#define ___KEYPAD_BEAKL_L4___  _COMM,  _6,     _9,     _8,   _COMM

#+end_src

***** Beakl 6 wide

#+begin_src C :tangle keypads.h
#define ___6KEYPAD_BEAKL_L1___     ___, KEYPAD_BEAKL_L1
#define ___6KEYPAD_BEAKL_L2___     ___, KEYPAD_BEAKL_L2
#define ___6KEYPAD_BEAKL_L3___ KC_MINS, KEYPAD_BEAKL_L3
#define ___6KEYPAD_BEAKL_L4___     ___, KEYPAD_BEAKL_L4

// if there's room. the top row on the right.
#define ___KEYPAD_BEAKL_R1___     ___, KC_CIRC,  KC_PERC,  KC_TILD, ___

#+end_src

***** Beakl Wi Hex pad

#+begin_src C :tangle keypads.h
#define ___KP_BKL_WI_L1___ _X_,    HEX_A,  HEX_B,  HEX_C,   _X_
#define ___KP_BKL_WI_L2___ _X_,    HEX_D,  HEX_E,  HEX_F,   _X_
#define ___KP_BKL_WI_L3___ _X_,    L_BRKT, R_BRKT, DELIM,   _X_
#+end_src

***** Beakl Wi Number pad

#+begin_src C :tangle keypads.h

#define ___KP_BKL_WI_R1___ _SLSH, _4, _5, _9, _ASTR
#define ___KP_BKL_WI_R2___ _DOT , _1, _2, _3, _MINS
#define ___KP_BKL_WI_R3___ _COMM, _8, _6, _7, _PLUS
#+end_src

**** Standard keypad

#+begin_src C :tangle keypads.h

#define ___KEYPAD_1___ ___,  _7,  _8,    _9,     _PSLS
#define ___KEYPAD_2___ _DOT, _4,  _5,    _6,     _PAST
#define ___KEYPAD_3___ _0,   _1,  _2,    _3,     _PMNS
#+end_src

**** Miryoku Keypad

#+begin_src C :tangle keypads.h

#define ___KEYPAD_miryoku_1___ _LBRC, _7,  _8,  _9,  _RBRC, ____5_
#define ___KEYPAD_miryoku_2___ _SCLN, _4,  _5,  _6,  _EQUAL, ____5_
#define ___KEYPAD_miryoku_3___ _GRV,  _1,  _2,  _3,  _BSLS, ____5_
#+end_src

**** 5 row keypad

#+begin_src C :tangle keypads.h

// 5 Row keypads
#define ___5KEYPAD_1___ _X_, ___KEYPAD_1___
#define ___5KEYPAD_2___ _X_, ___KEYPAD_2___
#define ___5KEYPAD_3___ _X_, ___KEYPAD_3___
#define ___5KEYPAD_4___ _X_, _0,  _DOT,  _PEQL,  _PPLS

#+end_src

**** Function Pad 3x4

#+begin_src C :tangle keypads.h
// Function pad.  Same idea as above, but for function keys.

// Funcpads are a bit weird. THey are KC values, so for
// this to work, there are BP_ versions of the F keys.
// I don't really use this, so maybe it'll go away in favor
// of something more useful.
// 4x3 and 3x4 funcpads.
// Only 4 columns, so the fifth can be added to either end.
#define ___4_FUNCPAD_1___   _F9, _F10, _F11, _F12
#define ___4_FUNCPAD_2___   _F5, _F6,  _F7,  _F8
#define ___4_FUNCPAD_3___   _F1, _F2,  _F3,  _F4

#+end_src

**** Miryoku Function Pad

#+begin_src C :tangle keypads.h
#define ___FUNCPAD_miryoku_1___   KC_F12, KC_F7, KC_F8, KC_F9, KC_PRINT_SCREEN
#define ___FUNCPAD_miryoku_2___   KC_F11, KC_F4, KC_F5, KC_F6, KC_SCROLL_LOCK
#define ___FUNCPAD_miryoku_3___   KC_F10, KC_F1, KC_F2, KC_F3, KC_PAUSE

#+end_src

**** 5x4 ambi function pad

#+begin_src C :tangle keypads.h
// For the left or right side.
#define ___5x4_FUNCPAD_T___   _TRNS, _F10,  _F11,  _F12, _TRNS
#define ___5x4_FUNCPAD_1___   _TRNS, _F7,   _F8,   _F9,  _TRNS
#define ___5x4_FUNCPAD_2___   _TRNS, _F4,   _F5,   _F6,  _TRNS
#define ___5x4_FUNCPAD_3___   _TRNS, _F1,   _F2,   _F3,  _TRNS


#+end_src


*** Layer Maps

**** Beakl Wi - Hex pad, keypad

#+begin_src C :tangle keypads.h
// beakl wi is a hexpad numpad.
/* Beakle Wi, Hexpad and keypad - needs a zero somewhere.*/
#define CARTE_KP_BKL_WI                         \
  carte_de_map( "  ABC  /459* ",                \
                "  DEF  .123- ",                \
                "  {}|  ,867+ ")

#define ___KP_BKL_WI_3x10___                                    \
  CHUNK_LANG_MAP(___KP_BKL_WI_L1___, ___KP_BKL_WI_R1___,        \
                 ___KP_BKL_WI_L2___, ___KP_BKL_WI_R2___,        \
                 ___KP_BKL_WI_L3___, ___KP_BKL_WI_R3___)


#+end_src

**** Beakl 15, 3 row keypad
***** Funcpad on right.

#+begin_src C :tangle keypads.h
// BEAKL 15 and a f1-f12 funcpad
#define CARTE_KP_BKL_FUNC                       \
  carte_de_map("    523:  F9-12",               \
               "  -7.104  F5-8",                \
               "   /798,  F1-4")

#define ___KP_BKL_FUNC_3x10___                                          \
  CHUNK_LANG_MAP(___KEYPAD_BEAKL_L2___, _TRNS, ___4_FUNCPAD_1___,       \
                 ___KEYPAD_BEAKL_L3___, _TRNS, ___4_FUNCPAD_2___,       \
                 ___KEYPAD_BEAKL_L4___, _TRNS, ___4_FUNCPAD_3___)

#+end_src

***** Mods on right.

#+begin_src C :tangle keypads.h
// BEAKL 15 and mods.
#define CARTE_KP_BKL_MODS                          \
  carte_de_map("    523:  SL Mods",                \
               "  -7.104  OS Mods",                \
               "   /798,   Enter")


#define ___KP_BKL_MODS_3x10___                                          \
  CHUNK_LANG_MAP(___KEYPAD_BEAKL_L2___, _TRNS, ___SML_MODS_R___,        \
                 ___KEYPAD_BEAKL_L3___, ___OS_MODS_R___,                \
                 ___KEYPAD_BEAKL_L4___, _TRNS, _ENT, _ENT, _ENT, _TRNS)

// 4 rows, BEAKL 15 and a f1-f12 funcpad
#define ___KP_BKL_FUNC_4x10___                                  \
  CHUNK_LANG_ROW(___KEYPAD_BEAKL_L1___, ___KEYPAD_BEAKL_R1___), \
    CHUNK_LANG_MAP(___KP_BKL_FUNC_3x10___)

#+end_src

**** 4 row function pad, keypad.

#+begin_src C :tangle keypads.h
// 4 rows, funcpad, regular keypad on right.
#define ___FP_KP_4x10___                                        \
  CHUNK_LANG_ROW(___5x4_FUNCPAD_T___,  ___5KEYPAD_1___),        \
    CHUNK_LANG_MAP(___5x4_FUNCPAD_1___,  ___5KEYPAD_2___,       \
                   ___5x4_FUNCPAD_2___,  ___5KEYPAD_3___,       \
                   ___5x4_FUNCPAD_3___,  ___5KEYPAD_4___)

#define CARTE_FP_KP                             \
  carte_de_map("  F9-12   789+",                \
               "  F5-8   .456*",                \
               "  F1-4   0123-")

#+end_src

**** Function pad, number pad.

#+begin_src C :tangle keypads.h
// funcpad, regular keypad on right.
#define ___FP_KP_3x10___                                        \
  CHUNK_LANG_MAP(___4_FUNCPAD_1___, ___, ___5KEYPAD_1___,       \
                 ___4_FUNCPAD_2___, ___,  ___5KEYPAD_2___,      \
                 ___4_FUNCPAD_3___, ___,  ___5KEYPAD_3___)

#define CARTE_KP_FP                             \
  carte_de_map("   789+  F9-12",                \
               "  .456*  F5-8",                 \
               "  0123-  F1-4")
#+end_src

**** Keypad, Function pad.

#+begin_src C :tangle keypads.h
// regular keypad on left.
#define ___KP_FP_3x10___                                        \
  CHUNK_LANG_MAP(___5KEYPAD_1___,  ___, ___4_FUNCPAD_1___,      \
                 ___5KEYPAD_2___,  ___, ___4_FUNCPAD_2___,      \
                 ___5KEYPAD_3___,  ___, ___4_FUNCPAD_3___)

#define CARTE_MODS_KP                           \
  carte_de_map("  SMods   789+",                \
               "  OSMods .456*",                \
               "  F1-4   0123-")

#+end_src

**** Left Mods, Right Keypad

#+begin_src C :tangle keypads.h
// funcpad, regular keypad on right.
#define ___MODS_KP_3x10___                                    \
  CHUNK_LANG_MAP(___SML_MODS_L___, ___, ___5KEYPAD_1___,        \
                 ___OS_MODS_L___,       ___5KEYPAD_2___,     \
                 ___5___,               ___5KEYPAD_3___)

#define CARTE_KP_MODS                           \
  carte_de_map("   789+  SMods",                \
               "  .456*  OSMods",                 \
               "  0123-  ")

#+end_src

**** Left keypad, Right Mods

#+begin_src C :tangle keypads.h
// regular keypad on left.
#define ___KP_MODS_3x10___                                      \
  CHUNK_LANG_MAP(___5KEYPAD_1___,  ___, ___SML_MODS_R___,       \
                 ___5KEYPAD_2___,  ___OS_MODS_L___,        \
                 ___5KEYPAD_3___,  ___, ___4___)
#+end_src

**** Left Function keypad, Right Mods

#+begin_src C :tangle keypads.h

#define CARTE_FUN                           \
  carte_de_map("  F9-F12  SMods",                \
               "  F5-F8   OSMods",               \
               "  F1-F4   ")

#define ___FUN_3x10___                                                  \
  CHUNK_LANG_MAP(___4_FUNCPAD_1___, ___,  ___, ___SML_MODS_R___,        \
                 ___4_FUNCPAD_2___, ___,  ___OS_MODS_R___,              \
                 ___4_FUNCPAD_3___, ___,  ___5___)

#+end_src

**** Miryoku

**** Function key pad with smart lock mods and oneshots

#+begin_src C :tangle keypads.h
#define CARTE_FUN_MIRYOKU                       \
  carte_de_map("F12 F7-F9 prt  SMods",          \
               "F11 F4-F6 scr  OSMods",         \
               "F10 F1-F3 pse  ")

#define ___FP_MIRYOKU_3x10___                           \
  ___FUNCPAD_miryoku_1___,  ___, ___SML_MODS_R___,     \
    ___FUNCPAD_miryoku_2___,  ___OS_MODS_R___,         \
    ___FUNCPAD_miryoku_3___,  ___5___
#+end_src

**** A lefthand keypad.

#+begin_src C :tangle keypads.h
// wants . and 0 on left thumb.
#define CARTE_KP_MIRYOKU      \
  carte_de_map(" [789]",      \
               " ;456=",      \
               " `123\\")

#define ___KP_MIRYOKU_3x10___                                     \
  CHUNK_LANG_MAP(___KEYPAD_miryoku_1___,                          \
                 ___KEYPAD_miryoku_2___,                             \
                 ___KEYPAD_miryoku_3___)
#+end_src





** Navigation
NAVIGATION  - MOUSE, Arrows, mod keys, Scroll, Buttons, Arrows, Tab, Home, page up/down, End

*** Introduction
Navigation layers:
   3 row Layer
   4 Row Layer with repeated and swapped VI arrows, and Scroll wheel.

Navigation layer with optional 4th Row....
Optional edge columns.

M = Mouse
B = Button
W = Wheel
AC   = Acceleration
CCCV = Tap -> Ctrl-C, hold for double tap duration -> Ctrl-V
CTCN = Tap -> Ctrl-T, hold for double tap duration -> Ctrl-N
CWCQ = Tap -> Ctrl-W, hold for double tap duration -> Ctrl-Q

Replaced CWCQ with =KC_DOT= in NAVA - 22-11-2022
Dot is the repeat key in vi (vi keybindings)

*** Nav-A
NAVA traded home and end for tab and backtab, combos fix that.
Combos: see combos.def
HOME = TAB & PGDN
END =  BKTAB & PGUP
NAVA also has lock mods on the top row mouse side

*** Some row choices
The two primary top rows and the home row.
|-----+-------+------+------+-------+------+------+-----+------+-----+------+-----|
| MB5 | GUI   | ALT  | CTRL | SFT   | MAC0 | CTCN | MB1 | MB2  | MB3 | MB4  | MB5 |
| MB5 | MB4   | MB3  | MB2  | MB1   | MAC0 | CTCN | MB1 | MB2  | MB3 | MB4  | MB5 |
| TAB | MLeft | MDwn | MUp  | MRght | MAC1 | CCCV | Lft | Down | UP  | Rght | TAB |

A variety of lower rows are defined here.

|---+-------+------+-----+-------+------+------+-------+------+------+-------+---|
|   | WLeft | WDwn | WUp | WRght | MAC2 | CWCQ | HOME  | PGDN | PGUP | END   |   |
|   | WLeft | WDwn | WUp | WRght | MAC2 | CWCQ | TAB   | PGDN | PGUP | BKTAB |   |
|   | WLeft | WDwn | WUp | WRght | MAC2 | DOT  | TAB   | PGDN | PGUP | BKTAB |   |
|   | Left  | Dwn  | Up  | Rght  | CCCV | CCCV | MLeft | MDwn | MUp  | MRght |   |

*** Parts are here.
**** Mouse

#+begin_src C :tangle nav.h
#ifdef MOUSEKEY_ENABLE
#define ___MOUSE_LDUR___      KC_MS_L,  KC_MS_D,  KC_MS_U,  KC_MS_R
#define ___MWHEEL_LDUR___     KC_WH_L,  KC_WH_D,  KC_WH_U,  KC_WH_R
//  really BTN 1, 2, 3, 8, 9 - according to xev.
#define ___MOUSE_BTNS_R___    KC_BTN1,  KC_BTN3,  KC_BTN2,  KC_BTN4,  KC_BTN5
#define ___4MOUSE_BTNS_R___   KC_BTN1,  KC_BTN3,  KC_BTN2,  KC_BTN4
#define ___3MOUSE_BTNS_R___   KC_BTN1,  KC_BTN3,  KC_BTN2
//  really BTN 9, 8, 3, 2, 1 - according to xev
#define ___4MOUSE_BTNS_L___   KC_BTN4,  KC_BTN2,  KC_BTN3,  KC_BTN1
#define ___MOUSE_BTNS_L___    KC_BTN5,  KC_BTN4,  KC_BTN2,  KC_BTN3,  KC_BTN1
#define ___MOUSE_ACCL_012___  KC_ACL0,  KC_ACL1,  KC_ACL2
#define ___MACCL___ ___MOUSE_ACCL_012___
#endif
#+end_src

**** Arrows, command

Vi arrows, home, page up, down, etc.

#+begin_src C :tangle nav.h

#define ___VI_ARROWS___           KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT
#define ___HOME_PGDN_PGUP_END___  KC_HOME,  KC_PGDN, KC_PGUP, KC_END
#define ___TAB_PGDN_PGUP_BKTAB___ KC_TAB,  KC_PGDN, KC_PGUP, KC_BKTAB
// home and end are combos.  tab/pgdn = home, bktab/pgup = end.

#define ___REDO_CUT_COPY_PASTE_UNDO___ S_REDO, S_CUT, S_COPY, S_PASTE, S_UNDO

#+end_src

**** Mouse keys on or off..
The parts to the full nav layer, 2 versions, with and without mouse.
Mouse stuff goes away when it is not enabled.
***** The regular 3x10 parts.

#+begin_src C :tangle nav.h

#ifdef MOUSEKEY_ENABLE
#define ___NAV_La_1___ ___SML_MODS_L___, KC_ACL0
#define ___NAV_L_1___ ___4MOUSE_BTNS_L___, KC_ACL0
#define ___NAV_L_2___ ___MOUSE_LDUR___,  KC_ACL1
#define ___NAV_L_3___ ___MWHEEL_LDUR___, KC_ACL2
#define ___NAV_L_4___ ___VI_ARROWS___,   KC_CCCV

#define ___NAV_R_1___  KC_CTCN, ___4MOUSE_BTNS_R___
#define ___NAV_R_4___  KC_CCCV, ___MOUSE_LDUR___

#else

#define ___NAV_La_1___ ___NAV_L_1___
#define ___NAV_L_1___  ___OS_MODS_L___
#define ___NAV_L_2___  ___SML_MODS_L___, ___
#define ___NAV_L_3___  ___5___
#define ___NAV_L_4___  ___VI_ARROWS___,   KC_CCCV

#define ___NAV_R_1___  KC_CTCN, ___SML_MODS_R___
#define ___NAV_R_4___  KC_CCCV, ___4___

#endif // end mousekey

#define ___NAV_R_2___  KC_CCCV, ___VI_ARROWS___
#define ___NAV_R_3___  KC_CWCQ,  ___HOME_PGDN_PGUP_END___
#define ___NAV_Ra_3___ KC_DOT,  ___TAB_PGDN_PGUP_BKTAB___
#+end_src

***** The Wide 12 key parts

#+begin_src C :tangle nav.h

#ifdef MOUSEKEY_ENABLE

#define ___6NAV_L_1___ ___MOUSE_BTNS_L___,           KC_ACL0
#define ___6NAV_L_2___ TAB_BKTAB, ___MOUSE_LDUR___,  KC_ACL1
#define ___6NAV_L_3___ ___,       ___MWHEEL_LDUR___, KC_ACL2
#define ___6NAV_L_4___ ___,       ___VI_ARROWS___,   KC_CCCV

#define ___6NAV_R_1___ KC_CTCN, ___MOUSE_BTNS_R___
#define ___6NAV_R_4___ KC_CCCV, ___MOUSE_LDUR___, ___

#else

#define ___6NAV_L_1___ ___6___
#define ___6NAV_L_2___ TAB_BKTAB, ___SML_MODS_L___, ___

#define ___6NAV_L_3___ ___,       ___5___
#define ___6NAV_L_4___ ___,       ___VI_ARROWS___,   KC_CCCV

#define ___6NAV_R_1___ KC_CTCN, ___SML_MODS_R___
#define ___6NAV_R_4___ KC_CCCV, ___4___, ___

#endif // end mousekey


#define ___6NAV_R_2___ KC_CCCV, ___VI_ARROWS___,          TAB_BKTAB
#define ___6NAV_R_3___ KC_CWCQ, ___HOME_PGDN_PGUP_END___, ___
#+end_src

**** Compact Navigation layer.

#+begin_src C :tangle nav.h
// compact. 3x10 per layer.
#define ___10_NAV_1a___ ___NAV_La_1___, ___NAV_R_1___
#define ___10_NAV_1___ ___NAV_L_1___, ___NAV_R_1___
#define ___10_NAV_2___ ___NAV_L_2___, ___NAV_R_2___
#define ___10_NAV_3___ ___NAV_L_3___, ___NAV_Ra_3___

#+end_src

**** Nav No Mouse - mods on left

Simple nav layer parts no mouse, with smart lock mouse layer key.

#+begin_src C :tangle nav.h

// designed without mouse, mods on left.
#define ___NAVnm_La_1___ ___NAV_L_1___
#define ___NAVnm_L_1___  ___SML_MODS_L___
#define ___NAVnm_L_2___  ___OS_MODS_L___, ___
#ifdef MOUSEKEY_ENABLE
#define ___NAVnm_L_3___  ___2___, SML_NAVm, ___2___  // get to mouse layer if enabled.
#else
#define ___NAVnm_L_3___  ___5___
#endif

#define ___10_NAVnm_1___ ___SML_MODS_L___, ___, ___NAV_R_1___
#define ___10_NAVnm_2___ ___OS_MODS_L___, ___NAV_R_2___
#define ___10_NAVnm_3___ ___NAVnm_L_3___, ___NAV_R_3___
#+end_src

**** Mouse layer only - mods on left

#+begin_src C :tangle nav.h
#ifdef MOUSEKEY_ENABLE
// Mouse layer only. mods on right.
#define ___10_NAVm_1___ ___NAV_L_1___, ___NAV_R_1___
#define ___10_NAVm_2___ ___NAV_L_2___, ___NAV_R_2___
#define ___10_NAVm_3___ ___NAV_L_3___, ___NAV_R_3___
#endif
#+end_src

*** Layers
**** Mouse buttons left and right No Mods
Top row is 5 mouse buttons on both sides.
Bottom row below arrows is tab, page down, page up, back tab.

Home and end are on combos specific to the layer.

#+begin_src C :tangle nav.h
// A Navigation Layer
#define CARTE_NAV                               \
  carte_de_map("54321 0  ctn 12345",            \
               " ldur 1  ccv ldur",             \
               " ldur 2   .  tdubt")

#define ___NAV_3x10___ ___10_NAV_1___, ___10_NAV_2___, ___10_NAV_3___
#define ___NAV_3x12___ ___12_NAV_1___, ___12_NAV_2___, ___12_NAV_3___
#+end_src
**** Mouse, Mods on left,

Smart lock mods, on left upper row.

#+begin_src C :tangle nav.h

#define CARTE_NAVA                              \
  carte_de_map(" gacs 0  ctn 12345",             \
               " ldur 1  ccv ldur",              \
               " ldur 2   .  tdubt")

#define ___NAVA_3x10___ ___10_NAV_1a___, ___10_NAV_2___, ___10_NAV_3___
#+end_src
**** No Mouse, HDUE

Home down up end instead of tab, page down, page up, backtab

#+begin_src C :tangle nav.h

#define CARTE_NAVnm                             \
  carte_de_map(" gacsc2 ctn cscag ",            \
               " gacs   ccv ldur",              \
               " __M_   cwq HDUE")

#define ___NAVnm_3x10___ ___10_NAVnm_1___, ___10_NAVnm_2___, ___10_NAVnm_3___
#+end_src
**** Mouse, HDUE

Home down up end instead of tab, page down, page up, backtab

#+begin_src C :tangle nav.h
#define CARTE_NAVm                                 \
  carte_de_map(" gacs 0  ctn 12345",               \
               " ldur 1  ccv ldur",                \
               " ldur 2  cwq HDUE")

#ifdef MOUSEKEY_ENABLE
#define ___NAVm_3x10___ ___10_NAVm_1___, ___10_NAVm_2___, ___10_NAVm_3___
#endif
#+end_src
**** Miryoku sans mouse
#+begin_src C :tangle nav.h
#define CARTE_NAV_miryoku                       \
  carte_de_map("  rdo  ccp undo",               \
               "  Caps ldur",                   \
               "  Ins  HDUE")

#define ___NAV_miryoku___ \
  ___5___, ___redo_cut_copy_paste_undo___,                              \
    ___5___, KC_CAPS, ___VI_ARROWS___,                                  \
    ___5___, KC_INSERT, ___HOME_
#+end_src
**** Miryoku with mouse
#+begin_src C :tangle nav.h
#define CARTE_NAVm_miryoku                      \
  carte_de_map("  rdo ccp undo",               \
               "      ldur",                   \
               "      ldur")

#ifdef MOUSEKEY_ENABLE
#define ___NAVm_miryoku___                                              \
  ___5___, ___redo_cut_copy_paste_undo___,                              \
    ___5___, ___, ___MOUSE_LDUR___,                                     \
    ___5___, ___, ___MWHEEL_LDUR___,
#endif

#+end_src


** Symbols
*** Introduction
Many years ago I discovered the Beakl 15 symbol layer and it was similar
but different than mine, I adopted it and then the layers began to
merge together and change.

**** Tap hold for paired symbols.

Tap hold openclose for the following symbols: <([{"`'

Holding the opening key for =TAP_HOLD_TERM= causes the matching symbol followed
by a back arrow.

**** Triple quotes with shift hold
triple the various quotes with shift-hold

**** Extending the Beakl symbol layer

There is the offical beakl symbol layer, and an extended symbol
layer which is expanded with: !?@`'/-;.

Placing these 8 keys in the pinky and index corners
at the edges of the, 3x3, BEAKL home Region.

Beakl has these keys in it's base layer which isn't the case
for other layouts like dvorak, colemak, etc.

**** Optimizing for Vi.

The third layer moves /:? to more accessible places.
 to make vi keybindings more accessible.

 Note that there are 2 widths. 12 and 10. The wider layer adds
 - and ; to the middle row edges.

**** Beakl 27

This came out in 2020, I preserve it here. I know its not for me.
But being as the the site for Beakl is gone this seems good here.

 #+begin_src C
   not yet implemented
 BEAKL27 (punctuation layer):
   ↹@$#↹  ~^`
   ↹<=>   [_]
   \(-)+ %{;}!
    *:/⏎  |~&
#+end_src

*** Parts is parts.

These are all the basic pieces.

#+begin_src C :tangle symbols.h
// Left
#define ___SB_L1___          _OCLTGT, _DLR,    _GT
#define ___SB_L1d___         _OCLTGT, _OCQUOT, _GT
#define ___SB_L2___  _BSLS,  _OCPRN,  _OCDQUO, _RPRN, _HASH
#define ___SB_L2c___ _BSLS,  _OCPRN,  _OCDQUO, _HASH, _RPRN
#define ___SB_L2d___ _BSLS,  _OCPRN,  _OCDQUO, _HASH, _PERC
#define ___SB_L3___          _COLN,   _ASTR,   _PLUS

// Right
#define ___SB_R1___          _OCBRC,   _UNDS,     _RBRC
#define ___SB_R1c___         _OCBRC,   _UNDS,     _MINS
#define ___SB_R1d___ _OCBRC, _QUES,    _UNDS,     _EXLM
#define ___SB_R2___  _PERC,  _OCCBR,   _EQL,      _RCBR,  _PIPE
#define ___SB_R3___          _AMPR,    _CIRC_ND,  _TILD_ND

// a and b... left and right.
#define ___SB_L3b___          _EQL,    _ASTR,   _PLUS

#define ___SB_R2a___ _PERC,  _OCCBR,   _EXLM,  _RCBR,  _PIPE
#define ___SB_R2b___ _EXLM,  _OCCBR,   _COLN,  _RCBR,  _SLSH
#define ___SB_R2c___ _EXLM,  _OCCBR,   _COLN,  _SLSH,  _RCBR
#define ___SB_R2d___ _OCCBR, _MINS,    _COLN,  _SLSH,  _PIPE

#+end_src

*** Original Beakl

This didn't last long for me using Dvorak with it. It was missing too many keys.

         =<$>   [_]=
      =-\(")# %{=}|;=
         =:*+   &^~=

#+begin_src C :tangle symbols.h
// ---------------------------
// ---------------------------
#define CARTE_SYMB_BEAKL                        \
  carte_de_map("  <$>   [_]   ",                \
               "-\\(\")# %{=}|;",               \
               "  :*+   &^~   ")

#define ___SYMB_BEAKL_3x10___                                           \
  CHUNK_LANG_MAP(_TRNS,   ___SB_L1___, _TRNS,    _TRNS,  ___SB_R1___, _TRNS, \
                 ___SB_L2___,                    ___SB_R2___,           \
                 _TRNS,   ___SB_L3___, _TRNS,    _TRNS, ___SB_R3___, _TRNS)

#+end_src

*** Beakl A - Extended for full coverage

 BEAKL Extended symbol layer,  Expanded with: *!?@`'/-;*

        =`<$>' ?[_]-=
      =-\(")# %{=}|;=
        =@:*+; !&^~/=

#+begin_src C :tangle symbols.h
// ---------------------------
// A: Extended.
#define CARTE_SYMB_BEAKLA                       \
  carte_de_map("   `<$>'  ?[_]-",               \
               "  -\\(\")#  %{:}|;",            \
               "   @=*+;  !&^~/")

#define ___SYMB_BEAKLA_3x10___                                          \
  CHUNK_LANG_MAP(_OCGRV, ___SB_L1___, _OCQUOT,   _QUES,  ___SB_R1___, _MINS, \
                 ___SB_L2___,                    ___SB_R2a___,          \
                 _AT,    ___SB_L3___, _SCLN,     _EXLM, ___SB_R3___, _SLSH)

#+end_src

*** Beakl B - Extended, optimized? for Vi.

        =`<$>' ?[_]=-
      =-\(")# !{:}/=;
        =@=*+; %&^~|=

#+begin_src C :tangle symbols.h
// ---------------------------
// B: Extended & Vi
#define CARTE_SYMB_BEAKLB                       \
  carte_de_map("   `<$>'  ?[_]-",               \
               "  -\\(\")#  !{:}/;",            \
               "   @=*+;  %&^~|")

#define ___SYMB_BEAKLB_3x10___                                          \
  CHUNK_LANG_MAP(_OCGRV, ___SB_L1___,  _OCQUOT,   _QUES,  ___SB_R1___, _MINS, \
                 ___SB_L2___,                     ___SB_R2b___,         \
                 _AT,    ___SB_L3b___, _SCLN,     _PERC, ___SB_R3___, _PIPE)

#+end_src

*** Beakl C - more optimization

I was not using closing *)]}* very much so moved them to less prominent spots.
Very comfy with vi.
          =`<$>'  ?[_-]=
       =-\("#)  !{:/};=
         =@=*+;  %&^~|=

#+begin_src C :tangle symbols.h
// ---------------------------
// C: Extended & Vi, move closing braces to pinky, seldom used.
// because of tap hold - open_openclose feature.
// Also emacs which mostly closes them.
#define CARTE_SYMB_BEAKLC                       \
  carte_de_map("   `<$>'  ?[_-]",               \
               "  -\\(\"#)  !{:/};",            \
               "   @=*+;  %&^~|")

#define ___SYMB_BEAKLC_3x10___                                          \
  CHUNK_LANG_MAP(_OCGRV, ___SB_L1___,  _OCQUOT,   _QUES,  ___SB_R1c___, _RBRC, \
                 ___SB_L2c___,                     ___SB_R2c___,        \
                 _AT,    ___SB_L3b___, _SCLN,     _PERC, ___SB_R3___, _PIPE)

#+end_src

*** Symbol D - ?

Closing *)]}* are now combos and no longer on the map giving more comfy spots to others.
Further optimisations, vi and otherwise. Doesn't look much like beakl anymore .

I need to change these combos. I dont like them. Easy to remember hard to type.
They work, but not great.

 Combos:
     ) is "#
     ] is ?_
     } is -:

         =`<'>$  [?_!=
         =\("#%  {-:/|.
     ==*+;  @&^~=

#+begin_src C :tangle symbols.h
// Next evolution.
// Use combos to get closing )]} instead of on the map.
// only need closes to 'fix something' that got out of wack somehow.
//
// pipe gets it's old home back, @ moves to index, pinkies get less load.
// [{ get demoted, ?! move up. @ moves to inner index,
// percent gets a better spot on the other side.
// and ' gets to be in the center, while $ gets a corner. pinkies are almost free.
// maybe ?_! can switch around some.  Room to mess around with the corners.

#define CARTE_SYMB_D                            \
  carte_de_map("   `<'>$  [?_! ",               \
               "   \\(\"#%  {-:/|",             \
               "    =*+;  @&^~ ")

#define ___SYMB_D_3x10___                                   \
  CHUNK_LANG_MAP(_OCGRV, ___SB_L1d___,  _DLR,   ___SB_R1d___, _NO,   \
                 ___SB_L2d___,                  ___SB_R2d___,           \
                 _NO,    ___SB_L3b___, _SCLN,     _AT, ___SB_R3___, _NO)

#+end_src

*** Miryoku

#+begin_src C :tangle symbols.h
// wants ( and ) on the left thumb.
#define CARTE_SYMB_MIRYOKU                                  \
  carte_de_map("  {&.(} ",                                  \
               "  :$%^+ ",                                  \
               "  ~!@#| ")

#define ___SYMB_MIRYOKU_3x10___                         \
  CHUNK_LANG_MAP(_OCCBR,   _AMPR, _DOT,  _OCPRN,   _RCBR, ____5_,     \
                 _COLN,    _DLR,  _PERC, _CIRC_ND, _PLUS, ____5_,     \
                 _TILD_ND, _EXLM, _AT,   _HASH,    _PIPE, ____5_)

#+end_src

*** Beakl Wi

#+begin_src C :tangle symbols.h
// ---------------------------
// WI: the Beakl Wi definition.
#define ___SYMB_BKL_WI_L1___ ___,   _DOT,  _ASTR, _AMPR, _PLUS
#define ___SYMB_BKL_WI_L2___ ___,   _QUES, _EXLM, _SLSH, _PIPE
#define ___SYMB_BKL_WI_L3___ ___,   _LT,   _GT,   _PERC, _AT

#define ___SYMB_BKL_WI_R1___ _ASTR, _OCBRC, _CIRC_ND, _RBRC, ___
#define ___SYMB_BKL_WI_R2___ _QUES, _OCPRN, _DLR ,    _RPRN, ___
#define ___SYMB_BKL_WI_R3___ _PIPE, _OCCBR, _HASH,    _RCBR, ___

#define CARTE_SYMB_BEAKLWI                      \
  carte_de_map(" .*&+  *[^] ",                  \
               " ?!/|  ?($) ",                  \
               " <>%@  |{#} ")

#define ___SYMB_BEAKL_WI_3x10___                                \
  CHUNK_LANG_MAP(___SYMB_BKL_WI_L1___, ___SYMB_BKL_WI_R1___,    \
                 ___SYMB_BKL_WI_L2___, ___SYMB_BKL_WI_R2___,    \
                 ___SYMB_BKL_WI_L3___, ___SYMB_BKL_WI_R3___)

#+end_src

*** Neo

#+begin_src C :tangle symbols.h
// ---------------------------
// Neo symbol layer
#define ___SYMB_NEO_L1___ ___,  _OCDQUOT, _UNDS,  _OCLBRC, _RBRC, _CIRC_ND
#define ___SYMB_NEO_L2___ ___,  _SLSH,  _MINS,  _OCLCBR, _RCBR, _ASTR
#define ___SYMB_NEO_L3___ ___,  _HASH,  _DLR,   _PIPE, _TILD_ND, _OCGRV

#define ___SYMB_NEO_R1___ _EXLM, _LT,    _GT,    _EQL,  _AMPR
#define ___SYMB_NEO_R2___ _QUES, _OCPRN, _RPRN , _QUOT, _COLN
#define ___SYMB_NEO_R3___ _PLUS, _PERC,  _BSLS,  _AT,   ___

#define CARTE_SYMB_NEO                          \
  carte_de_map("\"_[]^  !<>=&",                 \
               "/-{}*  ?()':",                  \
               "#$|~`  +%\@")

#define ___SYMB_NEO_3x10___                                     \
  CHUNK_LANG_MAP(___SYMB_NEO_L1___, ___SYMB_NEO_R1___,          \
                 ___SYMB_NEO_L2___, ___SYMB_NEO_R2___,          \
                 ___SYMB_NEO_L3___, ___SYMB_NEO_R3___)
#+end_src

** Top-Rows
Here are some layers inspired by the standard top number row of the keyboard.
These are easy to remember and use if you are new to a 42 or less.

*** Raise - The default, Standard Qwerty with F-keys

#+begin_src C :tangle toprows.h
#define CARTE_RAISE                             \
  carte_de_map("   !@#$%  ^&*()",               \
               "   12345  67890",               \
               " F1-    --    -F12")

#define ___RAISE_3x10___                        \
  ___10_SYMBOLS___,                             \
    ___10_NUMBERS___,                           \
    ___10_FUNCS___
#+end_src
*** Beakl 15

This is a Beakl 15 number row with either F keys or mods on the bottom
row.  This has been my current default for quite a while now.

**** F-Keys

#+begin_src C :tangle toprows.h
// These rows have already been langed, at their creation.
// altogether in a chunk.
#define CARTE_TOPROWS_BKL15                     \
  carte_de_map("   !@#$%  ^&*()",               \
               "   40123  76598",               \
               " F1-    --    -F12")

#define ___TOPROWS_BKL15_3x10___               \
  ___10_SYMBOLS___,                             \
    ___10_NUMBERS_BEAKL15___,                   \
    ___10_FUNCS___
#+end_src

**** Smart locks and one-shots

#+begin_src C :tangle toprows.h

#define CARTE_TOPROWS_MOD                       \
  carte_de_map("   !@#$%  ^&*()",               \
               "   40123  76598",               \
               "  SLMods  OSMods")

#define ___TOPROWS_MOD_3x10___                  \
  ___10_SYMBOLS___,                             \
    ___10_NUMBERS_BEAKL15___,                   \
    ___MODS_ROW___
#+end_src

*** @JohnM

@JohnM's preferred number row.

#+begin_src C :tangle toprows.h

#define CARTE_TOPROWS_JOHNM_MOD                 \
  carte_de_map("   !@#$%  ^&*()",               \
               "   84236  71059",               \
               "  SLMods  OSMods")

#define ___TOPROWS_JOHNM_MOD_3x10___            \
  ___10_SYMBOLS___,                             \
    ___10_NUMBERS_JOHNM___,                     \
    ___MODS_ROW___

#define CARTE_TOPROWS_JOHNM2_MOD                \
  carte_de_map("   !@#$%  ^&*()",               \
               "   65238  91047",               \
               "  SLMods  OSMods")

#define ___TOPROWS_JOHNM2_MOD_3x10___           \
  ___10_SYMBOLS___,                             \
    ___10_NUMBERS_JOHNM2___,                    \
    ___MODS_ROW___

#+end_src

*** Beakl 19

Just another arrangement of numbers. I like them both Im used to beakl 15.

#+begin_src C :tangle toprows.h
#define CARTE_TOPROWS_BKL19                     \
  carte_de_map("   !@#$%  ^&*()",               \
               "   32104  76598",               \
               " F1-    --    -F12")

#define ___TOPROWS_BKL19_3x10___                \
  ___10_SYMBOLS___,                             \
    ___10_NUMBERS_BEAKL19___,                   \
    ___10_FUNCS___

#+end_src


** Utilities
Layers, RGB, Media, etc.
*** Media

#+begin_src C :tangle layers.h
/********************************************************************************/
/* MEDIA  - Mute, Vol, play, pause, stop, next, prev, etc.   */
/********************************************************************************/
#define ___PRV_PLAY_NXT_STOP___ KC_MPRV, KC_MPLY, KC_MNXT, KC_MSTP
#define ___VDN_MUTE_VUP___ KC_VOLD, KC_MUTE, KC_VOLU

#define ___PRV_VDN_VUP_NXT___ KC_MPRV, KC_VOLD, KC_VOLU, KC_MNXT
#define ___STOP_PLAY_MUTE___ KC_MSTP, KC_MPLY, KC_MUTE

#define ___MUTE_PRV_PLAY_NXT_STOP___  KC_MUTE,  KC_MPRV, KC_MPLY, KC_MNXT, KC_MSTP
#define ___MUTE_PLAY_STOP___  KC_MUTE,  KC_MPLY,  KC_MSTP

#define CARTE_MEDIA                      \
  carte_de_map(" ",                      \
               "  < vdn vup >",          \
               "  stp play mute")

// miryoku, to be used with stop play mute on thumbs. - MEDIA thumbs.
#define ___MEDIA_3x10___                        \
  ___5___, ___5___,                             \
    ___5___, ___, ___PRV_VDN_VUP_NXT___,        \
    ___5___, ___5___
#+end_src

*** RGB

#+begin_src C :tangle layers.h
/********************************************************************************/
/* RGB  - Control those lights.                                                 */

/* ___, HUE SAT_INT MOD (UP),            | */
/* ___, HUE SAT INT MOD (DOWN), RGB_TOG  | P_B_R_SW_SN___, ___ */
/* ___6___,                              | ___, ___RGB_KXGT___, ___ */
/********************************************************************************/
// RGB FUNCTION Keysets
// RGB row for the _FN layer from the redo of the default keymap.c
#define ___RGB_HUE_SAT_INT_UP___ RGB_HUI, RGB_SAI, RGB_VAI, RGB_RMOD
#define ___RGB_HUE_SAT_INT_DN___ RGB_HUD, RGB_SAD, RGB_VAD, RGB_MOD
#define ___RGB_MODE_PRV_NXT___   RGB_RMOD, RGB_MOD
#define ___RGB_TOGGLE___         RGB_TOG
#define ___RGB_P_B_R_SW_SN___    RGB_M_P, RGB_M_B, RGB_M_R, RGB_M_SW, RGB_M_SN
#define ___RGB_KXGT___           RGB_M_K, RGB_M_X, RGB_M_G, RGB_M_T

/// An RGB Layer
#define ___10_RGB_1___ ___RGB_HUE_SAT_INT_UP___, ___,     ___5___
#define ___10_RGB_2___ ___RGB_HUE_SAT_INT_DN___, RGB_TOG, ___RGB_P_B_R_SW_SN___
#define ___10_RGB_3___ ___5___,                                ___, ___RGB_KXGT___

/********************************************************************************/
/* The RGB LAYER Chunk                                                          */
/********************************************************************************/
#define ___RGB_3x10___ ___10_RGB_1___, ___10_RGB_2___, ___10_RGB_3___


#+end_src

*** Adjust

#+begin_src C :tangle layers.h
/********************************************************************************/
/* ADJUST - Miscellaneous Melange.                                              */
/********************************************************************************/
// For an Adjust layer. Like RBB with audio, flash, etc.
#define ___ADJUST_L1___ ___RGB_HUE_SAT_INT_UP___,       RGB_TOG
#define ___ADJUST_L2___ MU_TOG, CK_TOGG, AU_ON, AU_OFF, CG_NORM
#define ___ADJUST_L3___ ___RGB_HUE_SAT_INT_DN___,       KC_RGB_T

#define ___ADJUST_R1___  ___, KC_MAKE, VRSN, MG_NKRO, KC_RESET
#define ___ADJUST_R2___  EE_CLR, ___PRV_PLAY_NXT_STOP___,
#define ___ADJUST_R3___  MG_NKRO, ___VDN_MUTE_VUP___, RGB_IDL
/********************************************************************************/
/* The Adjust LAYER Chunks                                                      */
/********************************************************************************/
#define ___ADJUST_3x10___  ___ADJUST_L1___, ___ADJUST_R1___,    \
    ___ADJUST_L2___, ___ADJUST_R2___,                           \
    ___ADJUST_L3___, ___ADJUST_R3___


#+end_src

*** Layers Control

#+begin_src C :tangle layers.h
/********************************************************************************/
/* LAYERS - Define a base layer, switch to any layer. Get around. Experiment.   */
/*                                                                              */
/* Base Layers on the left hand,                                                */
/* transient layers on the right. Centered on the home region.                  */
/* A good place to attach an experimental layer.                                */
/*                                                                              */
/********************************************************************************/
//  Base Layers
// this was kc_dvorak et al. But since its configurable as to who would be here
// that no longer makes sense. So next keys for locale and base layer. and a set to
// make it permanent. Cycling of layers is based on current locale.
#define ___BASE_LAYERS___ ___, KC_SET_BASE, KC_NEXT_BASE_LAYER, KC_NEXT_LOCALE, ___

// transient layers.
#define ___5_LAYERS_T___     ___, MO(_NAV),  MO_SYMB,  MO_KEYPAD,  MO_TOPROWS
#ifdef SECOND_LOCALE
#undef LANG_IS
#define LANG_IS SECOND_LOCALE
#define ___5_LAYERS_T_BP___  ___, MO(_NAV),  MO_SYMB,  MO_KEYPAD,  MO_TOPROWS
#undef LANG_IS
#define LANG_IS DEFAULT_LANG
#else
#define ___5_LAYERS_T_BP___  ___, MO(_NAV),  ___3___
#endif

#define ___5_LAYERS_T_CTL___ ___, MO_RGB, ___, ___, MO_ADJUST


#define CARTE_LAYERS                            \
  carte_de_map("          |Nv S K TR",          \
               "  EE Bs Ln|Nv S K TR",          \
               " ")

/// A Layers Layer
#define ___LAYERS_3x10___                       \
  ___5___,            ___5_LAYERS_T_BP___,      \
    ___BASE_LAYERS___,  ___5_LAYERS_T___,       \
    ___5___,            ___5_LAYERS_T_CTL___
#+end_src
